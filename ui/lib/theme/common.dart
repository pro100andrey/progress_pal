import 'package:flex_color_scheme/flex_color_scheme.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

Set<FlexSchemeData> get appFlexSchemeDataList => {
  /* 0*/ FlexColor.amber,
  /* 1*/ FlexColor.aquaBlue,
  /* 2*/ FlexColor.bahamaBlue,
  /* 3*/ FlexColor.barossa,
  /* 4*/ FlexColor.bigStone,
  /* 5*/ FlexColor.blackWhite,
  /* 6*/ FlexColor.blue,
  /* 7*/ FlexColor.blueM3,
  /* 8*/ FlexColor.blueWhale,
  /* 9*/ FlexColor.blumineBlue,
  /*10*/ FlexColor.brandBlue,
  /*11*/ FlexColor.customColors,
  /*12*/ FlexColor.cyanM3,
  /*13*/ FlexColor.damask,
  /*14*/ FlexColor.deepBlue,
  /*15*/ FlexColor.deepOrangeM3,
  /*16*/ FlexColor.deepPurple,
  /*17*/ FlexColor.dellGenoa,
  /*18*/ FlexColor.ebonyClay,
  /*19*/ FlexColor.espresso,
  /*20*/ FlexColor.flutterDash,
  /*21*/ FlexColor.gold,
  /*22*/ FlexColor.green,
  /*23*/ FlexColor.greenM3,
  /*24*/ FlexColor.greyLaw,
  /*25*/ FlexColor.greys,
  /*26*/ FlexColor.hippieBlue,
  /*27*/ FlexColor.indigo,
  /*28*/ FlexColor.indigoM3,
  /*29*/ FlexColor.jungle,
  /*30*/ FlexColor.limeM3,
  /*31*/ FlexColor.mallardGreen,
  /*32*/ FlexColor.mandyRed,
  /*33*/ FlexColor.mango,
  /*34*/ FlexColor.material,
  /*35*/ FlexColor.materialBaseline,
  /*36*/ FlexColor.materialHc,
  /*37*/ FlexColor.money,
  /*38*/ FlexColor.orangeM3,
  /*39*/ FlexColor.outerSpace,
  /*40*/ FlexColor.pinkM3,
  /*41*/ FlexColor.purpleBrown,
  /*42*/ FlexColor.purpleM3,
  /*43*/ FlexColor.red,
  /*44*/ FlexColor.redM3,
  /*45*/ FlexColor.redWine,
  /*46*/ FlexColor.rosewood,
  /*47*/ FlexColor.sakura,
  /*48*/ FlexColor.sanJuanBlue,
  /*49*/ FlexColor.sepia,
  /*50*/ FlexColor.shadBlue,
  /*51*/ FlexColor.shadGray,
  /*52*/ FlexColor.shadGreen,
  /*53*/ FlexColor.shadNeutral,
  /*54*/ FlexColor.shadOrange,
  /*55*/ FlexColor.shadRed,
  /*56*/ FlexColor.shadRose,
  /*57*/ FlexColor.shadSlate,
  /*58*/ FlexColor.shadStone,
  /*59*/ FlexColor.shadViolet,
  /*60*/ FlexColor.shadYellow,
  /*61*/ FlexColor.shadZinc,
  /*62*/ FlexColor.shark,
  /*63*/ FlexColor.tealM3,
  /*64*/ FlexColor.verdunHemlock,
  /*65*/ FlexColor.vesuviusBurn,
  /*66*/ FlexColor.wasabi,
  /*67*/ FlexColor.yellowM3,
};

// ignore: avoid_classes_with_only_static_members
abstract final class AppTheme {
  static FlexSchemeData get _baseColor => appFlexSchemeDataList.elementAt(57);
  // The FlexColorScheme defined light mode ThemeData.
  static ThemeData get light {
    final colors = _baseColor.light;
    final lightTheme = FlexThemeData.light(
      colors: colors,
      // Input color modifiers.
      swapLegacyOnMaterial3: true,
      // Surface color adjustments.
      lightIsWhite: true,
      // Convenience direct styling properties.
      bottomAppBarElevation: 0.5,
      // Component theme configurations for light mode.
      subThemesData: const FlexSubThemesData(
        interactionEffects: true,
        blendOnLevel: 10,
        useM2StyleDividerInM3: true,
        splashType: FlexSplashType.instantSplash,
        splashTypeAdaptive: FlexSplashType.instantSplash,
        adaptiveElevationShadowsBack: FlexAdaptive.all(),
        adaptiveAppBarScrollUnderOff: FlexAdaptive.all(),
        defaultRadius: 6,
        elevatedButtonSchemeColor: SchemeColor.onPrimaryContainer,
        elevatedButtonSecondarySchemeColor: SchemeColor.primaryContainer,
        outlinedButtonSchemeColor: SchemeColor.onSurface,
        outlinedButtonOutlineSchemeColor: SchemeColor.outlineVariant,
        toggleButtonsBorderSchemeColor: SchemeColor.outlineVariant,
        segmentedButtonSchemeColor: SchemeColor.primary,
        segmentedButtonBorderSchemeColor: SchemeColor.outlineVariant,
        switchThumbSchemeColor: SchemeColor.onPrimaryContainer,
        switchAdaptiveCupertinoLike: FlexAdaptive.all(),
        unselectedToggleIsColored: true,
        sliderValueTinted: true,
        sliderTrackHeight: 8,
        inputDecoratorContentPadding: EdgeInsets.all(12),
        inputDecoratorBorderSchemeColor: SchemeColor.primary,
        inputDecoratorSchemeColor: SchemeColor.primary,
        inputDecoratorBorderType: FlexInputBorderType.outline,
        inputDecoratorRadius: 8,
        inputDecoratorIsFilled: true,
        inputDecoratorUnfocusedHasBorder: false,
        inputDecoratorBackgroundAlpha: 40,
        inputDecoratorFocusedBorderWidth: 2,
        fabUseShape: true,
        fabAlwaysCircular: true,
        chipSchemeColor: SchemeColor.secondaryContainer,
        chipSelectedSchemeColor: SchemeColor.primaryContainer,
        chipFontSize: 12,
        chipIconSize: 16,
        chipPadding: EdgeInsetsDirectional.fromSTEB(4, 4, 4, 4),
        cardRadius: 12,
        popupMenuRadius: 6,
        popupMenuElevation: 4,
        alignedDropdown: true,
        tooltipRadius: 6,
        tooltipSchemeColor: SchemeColor.surfaceContainerHigh,
        tooltipOpacity: 0.96,
        dialogBackgroundSchemeColor: SchemeColor.surfaceContainerHigh,
        dialogRadius: 12,
        snackBarRadius: 6,
        snackBarElevation: 6,
        snackBarBackgroundSchemeColor: SchemeColor.surfaceContainerLow,
        appBarBackgroundSchemeColor: SchemeColor.surfaceContainerLowest,
        appBarScrolledUnderElevation: 0.5,
        bottomAppBarHeight: 60,
        tabBarIndicatorWeight: 4,
        tabBarIndicatorTopRadius: 4,
        tabBarDividerColor: Color(0x00000000),
        drawerRadius: 0,
        drawerElevation: 2,
        drawerIndicatorOpacity: 0.5,
        bottomSheetBackgroundColor: SchemeColor.surfaceContainerHigh,
        bottomSheetModalBackgroundColor: SchemeColor.surfaceContainer,
        bottomSheetRadius: 12,
        bottomSheetElevation: 4,
        bottomSheetModalElevation: 6,
        bottomNavigationBarSelectedLabelSchemeColor: SchemeColor.primary,
        bottomNavigationBarMutedUnselectedLabel: true,
        bottomNavigationBarSelectedIconSchemeColor: SchemeColor.primary,
        bottomNavigationBarMutedUnselectedIcon: true,
        bottomNavigationBarBackgroundSchemeColor: SchemeColor.surfaceContainer,
        bottomNavigationBarElevation: 0,
        menuRadius: 6,
        menuElevation: 4,
        menuSchemeColor: SchemeColor.surfaceContainerLowest,
        menuPadding: EdgeInsetsDirectional.fromSTEB(6, 10, 5, 10),
        menuBarRadius: 0,
        menuBarElevation: 0,
        menuBarShadowColor: Color(0x00000000),
        menuIndicatorBackgroundSchemeColor: SchemeColor.surfaceContainerHigh,
        menuIndicatorRadius: 6,
        searchBarElevation: 0,
        searchViewElevation: 0,
        navigationBarIndicatorSchemeColor: SchemeColor.secondaryContainer,
        navigationBarBackgroundSchemeColor: SchemeColor.surfaceContainer,
        navigationBarElevation: 0,
        navigationBarHeight: 72,
        navigationRailUseIndicator: true,
        navigationRailIndicatorSchemeColor: SchemeColor.secondaryContainer,
        navigationRailIndicatorOpacity: 1,
        navigationRailBackgroundSchemeColor: SchemeColor.surfaceContainer,
      ),
      // ColorScheme seed generation configuration for light mode.
      keyColors: const FlexKeyColors(
        useSecondary: true,
        useTertiary: true,
        useError: true,
        keepPrimary: true,
        keepSecondary: true,
        keepError: true,
        keepTertiaryContainer: true,
      ),
      tones: FlexSchemeVariant.chroma
          .tones(Brightness.light)
          .higherContrastFixed()
          .monochromeSurfaces(),
      // Direct ThemeData properties.
      visualDensity: FlexColorScheme.comfortablePlatformDensity,
      materialTapTargetSize: MaterialTapTargetSize.padded,
      cupertinoOverrideTheme: const CupertinoThemeData(applyThemeToAll: true),
    );

    return lightTheme.copyWith(
      focusColor: lightTheme.colorScheme.primary.withAlpha(45),
      // inputDecorationTheme: lightTheme.inputDecorationTheme.copyWith(
      //   hoverColor: lightTheme.inputDecorationTheme.fillColor?.lighten(2),
      // ),
      scrollbarTheme: lightTheme.scrollbarTheme.copyWith(
        thumbColor: WidgetStateProperty.all<Color>(
          lightTheme.colorScheme.outlineVariant,
        ),
        mainAxisMargin: 8,
      ),
      pageTransitionsTheme: const PageTransitionsTheme(
        builders: {
          TargetPlatform.android: ZoomPageTransitionsBuilder(),
          TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
          TargetPlatform.linux: NoTransitionPageTransitionsBuilder(),
          TargetPlatform.macOS: NoTransitionPageTransitionsBuilder(),
          TargetPlatform.windows: NoTransitionPageTransitionsBuilder(),
        },
      ),
    );
  }

  // The FlexColorScheme defined dark mode ThemeData.
  static ThemeData get dark {
    final colors = _baseColor.dark.copyWith(
      error: Colors.red.shade300,
    );
    final darkTheme = FlexThemeData.dark(
      // User defined custom colors made with FlexSchemeColor() API.
      colors: colors,
      // Input color modifiers.
      swapLegacyOnMaterial3: true,
      useMaterial3ErrorColors: true,
      // Convenience direct styling properties.
      bottomAppBarElevation: 0.5,
      // Component theme configurations for dark mode.
      subThemesData: const FlexSubThemesData(
        interactionEffects: true,
        blendOnLevel: 20,
        blendOnColors: true,
        useM2StyleDividerInM3: true,
        splashType: FlexSplashType.instantSplash,
        splashTypeAdaptive: FlexSplashType.instantSplash,
        adaptiveElevationShadowsBack: FlexAdaptive.all(),
        adaptiveAppBarScrollUnderOff: FlexAdaptive.all(),
        defaultRadius: 6,
        elevatedButtonSchemeColor: SchemeColor.onPrimaryContainer,
        elevatedButtonSecondarySchemeColor: SchemeColor.primaryContainer,
        outlinedButtonSchemeColor: SchemeColor.onSurface,
        outlinedButtonOutlineSchemeColor: SchemeColor.outlineVariant,
        toggleButtonsBorderSchemeColor: SchemeColor.outlineVariant,
        segmentedButtonSchemeColor: SchemeColor.primary,
        segmentedButtonBorderSchemeColor: SchemeColor.outlineVariant,
        switchThumbSchemeColor: SchemeColor.onPrimaryContainer,
        switchAdaptiveCupertinoLike: FlexAdaptive.all(),
        unselectedToggleIsColored: true,
        sliderValueTinted: true,
        sliderTrackHeight: 8,
        inputDecoratorContentPadding: EdgeInsets.all(12),
        inputDecoratorBorderSchemeColor: SchemeColor.primary,
        inputDecoratorBorderType: FlexInputBorderType.outline,
        inputDecoratorRadius: 8,
        inputDecoratorIsFilled: true,
        inputDecoratorUnfocusedHasBorder: false,
        inputDecoratorBackgroundAlpha: 60,
        inputDecoratorFocusedBorderWidth: 2,
        fabUseShape: true,
        fabAlwaysCircular: true,
        chipSchemeColor: SchemeColor.secondaryContainer,
        chipSelectedSchemeColor: SchemeColor.primaryContainer,
        chipFontSize: 12,
        chipIconSize: 16,
        chipPadding: EdgeInsetsDirectional.fromSTEB(4, 4, 4, 4),
        cardRadius: 12,
        popupMenuRadius: 6,
        popupMenuElevation: 4,
        alignedDropdown: true,
        tooltipRadius: 6,
        tooltipSchemeColor: SchemeColor.surfaceContainerHigh,
        tooltipOpacity: 0.96,
        dialogBackgroundSchemeColor: SchemeColor.surfaceContainerLow,
        dialogRadius: 12,
        snackBarRadius: 6,
        snackBarElevation: 6,
        snackBarBackgroundSchemeColor: SchemeColor.surfaceContainerLow,
        appBarBackgroundSchemeColor: SchemeColor.surfaceContainerLowest,
        appBarScrolledUnderElevation: 2.5,
        bottomAppBarHeight: 60,
        tabBarIndicatorWeight: 4,
        tabBarIndicatorTopRadius: 4,
        tabBarDividerColor: Color(0x00000000),
        drawerRadius: 0,
        drawerElevation: 2,
        drawerIndicatorOpacity: 0.5,
        bottomSheetBackgroundColor: SchemeColor.surfaceContainerHigh,
        bottomSheetModalBackgroundColor: SchemeColor.surfaceContainer,
        bottomSheetRadius: 12,
        bottomSheetElevation: 4,
        bottomSheetModalElevation: 6,
        bottomNavigationBarSelectedLabelSchemeColor: SchemeColor.primary,
        bottomNavigationBarMutedUnselectedLabel: true,
        bottomNavigationBarSelectedIconSchemeColor: SchemeColor.primary,
        bottomNavigationBarMutedUnselectedIcon: true,
        bottomNavigationBarBackgroundSchemeColor: SchemeColor.surfaceContainer,
        bottomNavigationBarElevation: 0,
        menuRadius: 6,
        menuElevation: 4,
        menuSchemeColor: SchemeColor.surfaceContainerLowest,
        menuPadding: EdgeInsetsDirectional.fromSTEB(6, 10, 5, 10),
        menuBarRadius: 0,
        menuBarElevation: 0,
        menuBarShadowColor: Color(0x00000000),
        menuIndicatorBackgroundSchemeColor: SchemeColor.surfaceContainerHigh,
        menuIndicatorRadius: 6,
        searchBarElevation: 0,
        searchViewElevation: 0,
        navigationBarIndicatorSchemeColor: SchemeColor.secondaryContainer,
        navigationBarBackgroundSchemeColor: SchemeColor.surfaceContainer,
        navigationBarElevation: 0,
        navigationBarHeight: 72,
        navigationRailUseIndicator: true,
        navigationRailIndicatorSchemeColor: SchemeColor.secondaryContainer,
        navigationRailIndicatorOpacity: 1,
        navigationRailBackgroundSchemeColor: SchemeColor.surfaceContainer,
      ),
      // ColorScheme seed configuration setup for dark mode.
      keyColors: const FlexKeyColors(
        useSecondary: true,
        useTertiary: true,
        useError: true,
        keepPrimary: true,
        keepSecondary: true,
        keepError: true,
        keepTertiaryContainer: true,
      ),
      tones: FlexSchemeVariant.chroma
          .tones(Brightness.dark)
          .higherContrastFixed()
          .monochromeSurfaces(),
      // Direct ThemeData properties.
      visualDensity: FlexColorScheme.comfortablePlatformDensity,
      materialTapTargetSize: MaterialTapTargetSize.padded,
      cupertinoOverrideTheme: const CupertinoThemeData(applyThemeToAll: true),
    );
    return darkTheme.copyWith(
      // inputDecorationTheme: darkTheme.inputDecorationTheme.copyWith(
      //   hoverColor: darkTheme.inputDecorationTheme.fillColor?.lighten(2),
      // ),
      scrollbarTheme: darkTheme.scrollbarTheme.copyWith(
        thumbColor: WidgetStateProperty.all<Color>(
          darkTheme.colorScheme.outlineVariant,
        ),
        mainAxisMargin: 8,
      ),
      pageTransitionsTheme: const PageTransitionsTheme(
        builders: {
          TargetPlatform.android: ZoomPageTransitionsBuilder(),
          TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
          TargetPlatform.linux: NoTransitionPageTransitionsBuilder(),
          TargetPlatform.macOS: NoTransitionPageTransitionsBuilder(),
          TargetPlatform.windows: NoTransitionPageTransitionsBuilder(),
        },
      ),
    );
  }
}

class NoTransitionPageTransitionsBuilder extends PageTransitionsBuilder {
  const NoTransitionPageTransitionsBuilder();

  @override
  Widget buildTransitions<T>(
    PageRoute<T>? route,
    BuildContext context,
    Animation<double> animation,
    Animation<double> secondaryAnimation,
    Widget child,
  ) => child;
}
